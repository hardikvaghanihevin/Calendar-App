package calendar.schedule.tasks.shiftwork.reminder.event.latest.calendarplanner.agendaplanner.callEnd.utils

import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import calendar.schedule.tasks.shiftwork.reminder.event.latest.calendarplanner.agendaplanner.dbimp.DataConverter
import calendar.schedule.tasks.shiftwork.reminder.event.latest.calendarplanner.agendaplanner.dbimp.EventInfoConverter
import calendar.schedule.tasks.shiftwork.reminder.event.latest.calendarplanner.agendaplanner.dbimp.IntDataConverter
import calendar.schedule.tasks.shiftwork.reminder.event.latest.calendarplanner.agendaplanner.models.EventInfo
import java.io.Serializable

/*
object MeetingReminderUtils {
    fun setMeetingReminderAlarm(eventInfo: EventInfo, context: Context) {
        try {
            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val intent = Intent(
                context,
                MeetingReminderReceiver::class.java
            )
            intent.putExtra("meetingReminderTitle", eventInfo.title)
            intent.putExtra("meetingReminderTime", eventInfo.meetingReminderTime)
            intent.putExtra("meetingReminderId", eventInfo.id)
            Log.d("TAG", "setMeetingReminderAlarm: ----------------->before pending intent")
            val pendingIntent = PendingIntent.getBroadcast(
                context,
                eventInfo.id.hashCode(),
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            AlarmManagerCompat.setExact(
                alarmManager,
                AlarmManager.RTC_WAKEUP,
                eventInfo.meetingReminderTime,
                pendingIntent
            )
            Log.d("TAG", "setMeetingReminderAlarm: ----------------->after pending intent")
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}
class ReminderReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        val reminderId = intent.getLongExtra("reminderId", 0)
        val reminder =
            EventInfoDatabase.getInstance(context).reminderDao().getReminderById(reminderId)
        if (reminder == null || reminder.reminderTittle == null || reminder.reminderTime == 0L) {
            return  // Exit if the reminder data is invalid
        }
        Log.d(
            "TAG",
            "onReceive: ----------------->received the notification" + " " + reminder.reminderTittle
        )
        showNotification(context, reminder)
    }

    private fun showNotification(context: Context, reminder: Reminder) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Reminder Notifications",
                NotificationManager.IMPORTANCE_DEFAULT
            )
            val notificationManager = context.getSystemService(
                NotificationManager::class.java
            )
            notificationManager?.createNotificationChannel(channel)
        }

        // Format the reminder time
        val sdf = SimpleDateFormat(
            "EEEE, dd-MMM-yyyy HH:mm",
            Locale(AppClass.sharedPreferences.getString("selectedLan", "en"))
        )
        val formattedTime: String
        formattedTime = if (reminder.meetingTime > 0) {
            sdf.format(Date(reminder.meetingTime))
        } else {
            sdf.format(Date(reminder.reminderTime))
        }


        // Create an intent for the notification click action
        val intent = Intent(
            context,
            MainActivity::class.java
        ) // Replace with your activity to handle reminders
        intent.putExtra("reminderId", reminder.id)
        val pendingIntent = PendingIntent.getActivity(
            context, reminder.id.toInt(),
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )

        // Build the notification
        val notificationBuilder = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(IconCompat.createWithBitmap(createDayBitmap(context, Date().date)))
            .setContentTitle(reminder.reminderTittle)
            .setContentText(formattedTime)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION))

        // Display the notification
        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager?.notify(reminder.id.toInt(), notificationBuilder.build())
    }

    private fun createDayBitmap(context: Context, dayOfMonth: Int): Bitmap {
        val width = context.resources.getDimensionPixelSize(R.dimen._50sdp)
        val height = context.resources.getDimensionPixelSize(R.dimen._50sdp)
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        canvas.drawColor(Color.TRANSPARENT)
        val paint = Paint()
        paint.style = Paint.Style.FILL
        paint.color = Color.BLACK
        paint.textSize = context.resources.getDimensionPixelSize(R.dimen._40sdp).toFloat()
        paint.typeface = Typeface.DEFAULT_BOLD
        paint.textAlign = Paint.Align.CENTER
        canvas.drawText(dayOfMonth.toString(), width / 2f, height / 1.25f, paint)
        return bitmap
    }

    companion object {
        private const val CHANNEL_ID = "Reminder_Channel"
    }
}
private open fun addNewOrUpdateMeeting() {
    if (isEditMode && !isFromCreate) {
    }
    val title: String = binding.etNameCreateMeeting.getText().toString().trim()
    if (title.isEmpty()) {
        try {
            binding.etNameCreateMeeting.setError(getString(calendar.schedule.tasks.shiftwork.reminder.event.latest.calendarplanner.agendaplanner.R.string.please_enter_title))
            binding.etNameCreateMeeting.requestFocus()
        } catch (e: Exception) {
        }
        return
    }
    val meetingTime: Long = sCalendar.getTimeInMillis()
    val reminderOption = AppClass.sharedPreferences.getInt("savedReminder", 1)
    if (reminderOption == 1) {
        saveMeetingWithoutReminder(title, isFromCreate, isEditMode)
        return
    }
    val reminderTime: Long = calculateReminderTime(meetingTime, reminderOption)
    if (reminderTime > System.currentTimeMillis()) {
        val savedDurationNumber = AppClass.sharedPreferences.getInt("savedDuration", 1)
        val meetingInfo = EventInfo()
        meetingInfo.id = System.currentTimeMillis().toString()
        meetingInfo.title = title
        meetingInfo.timezone = TimeZone.getDefault().id
        meetingInfo.meetingDuration = AppClass.sharedPreferences.getInt("savedDuration", 1)
        meetingInfo.starttime = sCalendar.getTimeInMillis()
        meetingInfo.endtime = calculateEndTime(sCalendar.getTimeInMillis(), savedDurationNumber)
        meetingInfo.meetingLocation = binding.etAddLocationCreateMeeting.getText().toString().trim()
        meetingInfo.description = binding.etAddDescriptionCreateMeeting.getText().toString().trim()
        meetingInfo.meetingReminderTime = reminderTime
        meetingInfo.dataType = 1
        if (!isFromCreate && isEditMode) {
            database.eventInfoDao().updateEventInfo(meetingInfo)
            Toast.makeText(this, "Updated with reminder", Toast.LENGTH_SHORT).show()
        } else {
            database.eventInfoDao().insert(meetingInfo)
            Toast.makeText(this, "Inserted with reminder", Toast.LENGTH_SHORT).show()
        }
        MeetingReminderUtils.setMeetingReminderAlarm(meetingInfo, this@CreateMeetingsActivity)
        //Toast.makeText(this, "Meeting saved with reminder.", Toast.LENGTH_SHORT).show();
    } else {
        Toast.makeText(this, "Reminder cannot be set for elapsed time!", Toast.LENGTH_SHORT).show()
    }
}
@Entity(tableName = "events")
@TypeConverters([IntDataConverter::class, DataConverter::class, EventInfoConverter::class])
class EventInfo : Serializable {
    @PrimaryKey
    var id: String = null
    var eventtitles: Array<String>
    var isallday = false
    var accountname: String? = null
    var noofdayevent = 0
    var nextnode: EventInfo? = null
    var starttime: Long = 0
    var endtime: Long = 0
    var title: String? = null
    var timezone: String? = null
    var eventcolor = 0
    var isSelect = true
    var isEvent = false
    var reminder: Array<Int>
    var description: String? = null
    var meetingDuration = 0 // New column
    var meetingLocation: String? = null // New column
    var meetingReminderTime: Long? = null // New column
    var dataType = 0

    constructor(eventtitles: Array<String>) {
        this.eventtitles = eventtitles
    }

    constructor()
    constructor(eventInfo: EventInfo) {
        eventtitles = eventInfo.eventtitles
        isallday = eventInfo.isallday
        id = eventInfo.id
        accountname = eventInfo.accountname
        noofdayevent = eventInfo.noofdayevent
        starttime = eventInfo.starttime
        endtime = eventInfo.endtime
        title = eventInfo.title
        timezone = eventInfo.timezone
        eventcolor = eventInfo.eventcolor
        isEvent = eventInfo.isEvent
        reminder = eventInfo.reminder
        description = eventInfo.description
        isSelect = eventInfo.isSelect
        meetingDuration = eventInfo.meetingDuration
        meetingLocation = eventInfo.meetingLocation
        meetingReminderTime = eventInfo.meetingReminderTime
        dataType = eventInfo.dataType
    }
}
*/
